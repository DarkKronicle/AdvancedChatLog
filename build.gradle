import javax.net.ssl.HttpsURLConnection
import java.nio.file.Files

plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
	id "io.freefair.lombok" version "6.0.0-m2"
	id "com.diffplug.spotless" version "5.17.1"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

Properties additionalProperties = new Properties()
if (file("extra.properties").exists()) {
	additionalProperties.load(file("extra.properties").newReader())
}


repositories {
	mavenCentral()
	mavenLocal() // only used to build the mod locally
	maven { url 'https://masa.dy.fi/maven' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'org.projectlombok:lombok:1.18.28'
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "fi.dy.masa.malilib:malilib-fabric-1.20.2:${project.malilib_version}"
	//modImplementation "com.github.DarkKronicle:AdvancedChatCore:${project.advancedchat_version}"
	modImplementation "io.github.darkkronicle:AdvancedChatCore:1.20.4-1.5.10" // only used to build the mod locally
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE.txt"
}

spotless {
	ratchetFrom 'origin/main'
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		target 'src/*/java/**/*.java'
		licenseHeaderFile "HEADER.txt"
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

task discord {
	dependsOn build

	doLast {
		String webhook
		if (additionalProperties["discord_webhook"] != null) {
			webhook = additionalProperties["discord_webhook"]
		} else if (System.getenv("discord_webhook") != null) {
			webhook = System.getenv("discord_webhook")
		} else {
			System.out.println("No webhook found...")
			return
		}

		String commitHash = 'git rev-parse --verify --short HEAD'.execute().text.trim()

		File file = remapJar.archiveFile.get().asFile
		String fileName = "$project.archives_base_name}-${project.mod_version}-${commitHash}.jar"
		String text = "<:Kronos:799707832399691867> **${project.archives_base_name} v${project.mod_version}-${commitHash} for ${project.minecraft_version}**"
		URL url = new URL(webhook)
		HttpsURLConnection connection = (HttpsURLConnection) url.openConnection()

		def cmdLine = "git log --format=%B -n 1"
		def procCommit = cmdLine.execute()
		String changeLog = procCommit.in.getText()
		text = text + "\n" + changeLog

		String boundary = UUID.randomUUID().toString()
		connection.setRequestMethod("POST")
		connection.setDoOutput(true)
		connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary)
		DataOutputStream stream = new DataOutputStream(connection.getOutputStream());

		stream.writeBytes("--" + boundary + "\r\n")
		stream.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\n\r\n")
		stream.write(Files.readAllBytes(file.toPath()))
		stream.writeBytes("\r\n")
		stream.writeBytes("--" + boundary + "\r\n");
		stream.writeBytes('Content-Disposition: form-data; name="content"\r\n\r\n' + text + '\r\n')
		stream.writeBytes("--" + boundary + "--\r\n")

		stream.flush()
		stream.close()

		connection.getInputStream().close()
		connection.disconnect()
	}

}
